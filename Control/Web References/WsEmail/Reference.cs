//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Control.WsEmail {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ServiceEmailSoap", Namespace="http://tempuri.org/")]
    public partial class ServiceEmail : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback enviarOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ServiceEmail() {
            this.Url = global::Control.Properties.Settings.Default.Control_WsEmail_ServiceEmail;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event enviarCompletedEventHandler enviarCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/enviar", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void enviar(string servidor, int puerto, bool ssl, string emailCredencial, string passCredencial, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] archivoPDF, string nombrePDF, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] archivoXML, string nombreXML, string from, string to, string bcc, string cc, string subject, string body) {
            this.Invoke("enviar", new object[] {
                        servidor,
                        puerto,
                        ssl,
                        emailCredencial,
                        passCredencial,
                        archivoPDF,
                        nombrePDF,
                        archivoXML,
                        nombreXML,
                        from,
                        to,
                        bcc,
                        cc,
                        subject,
                        body});
        }
        
        /// <remarks/>
        public void enviarAsync(string servidor, int puerto, bool ssl, string emailCredencial, string passCredencial, byte[] archivoPDF, string nombrePDF, byte[] archivoXML, string nombreXML, string from, string to, string bcc, string cc, string subject, string body) {
            this.enviarAsync(servidor, puerto, ssl, emailCredencial, passCredencial, archivoPDF, nombrePDF, archivoXML, nombreXML, from, to, bcc, cc, subject, body, null);
        }
        
        /// <remarks/>
        public void enviarAsync(
                    string servidor, 
                    int puerto, 
                    bool ssl, 
                    string emailCredencial, 
                    string passCredencial, 
                    byte[] archivoPDF, 
                    string nombrePDF, 
                    byte[] archivoXML, 
                    string nombreXML, 
                    string from, 
                    string to, 
                    string bcc, 
                    string cc, 
                    string subject, 
                    string body, 
                    object userState) {
            if ((this.enviarOperationCompleted == null)) {
                this.enviarOperationCompleted = new System.Threading.SendOrPostCallback(this.OnenviarOperationCompleted);
            }
            this.InvokeAsync("enviar", new object[] {
                        servidor,
                        puerto,
                        ssl,
                        emailCredencial,
                        passCredencial,
                        archivoPDF,
                        nombrePDF,
                        archivoXML,
                        nombreXML,
                        from,
                        to,
                        bcc,
                        cc,
                        subject,
                        body}, this.enviarOperationCompleted, userState);
        }
        
        private void OnenviarOperationCompleted(object arg) {
            if ((this.enviarCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.enviarCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")]
    public delegate void enviarCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591